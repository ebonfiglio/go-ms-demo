version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: go-ms-demo-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: go-ms-demo
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - go-ms-demo-network

  organization-service:
    build:
      context: .
      dockerfile: organization-service/Dockerfile
    container_name: organization-service
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: admin
      DB_NAME: go-ms-demo
      DB_SSL_MODE: disable
      SERVER_HOST: 0.0.0.0
      SERVER_PORT: 8080
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - go-ms-demo-network
    restart: unless-stopped

  frontend-service:
    build:
      context: .
      dockerfile: frontend-service/Dockerfile
    container_name: frontend-service
    environment:
      SERVER_HOST: 0.0.0.0
      SERVER_PORT: 3000
      ORGANIZATION_SERVICE_URL: http://organization-service:8080
      USER_SERVICE_URL: http://user-service:8081
      JOB_SERVICE_URL: http://job-service:8082
    ports:
      - "3000:3000"
    depends_on:
      - organization-service
    networks:
      - go-ms-demo-network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  go-ms-demo-network:
    driver: bridge
